{"name":"Kanina","tagline":"RabbitMQ on Rails","body":"[![Gem Version](https://badge.fury.io/rb/kanina.svg)](http://badge.fury.io/rb/kanina)\r\n[![Build Status](https://travis-ci.org/judy/kanina.svg?branch=master)](https://travis-ci.org/judy/kanina)\r\n[![Code Climate](https://codeclimate.com/github/judy/kanina.png)](https://codeclimate.com/github/judy/kanina)\r\n[![Coverage Status](https://coveralls.io/repos/judy/kanina/badge.png)](https://coveralls.io/r/judy/kanina)\r\n[![Inline docs](http://inch-ci.org/github/judy/kanina.png?branch=master)](http://inch-ci.org/github/judy/kanina)\r\n\r\nKanina is a Rails plugin that makes it easier for your models to communicate with RabbitMQ. It abstracts away queue and exchange creation, so you can focus on the message and subscription side of things in Rails.\r\n\r\nPrerequisites\r\n------------\r\n\r\nYou'll need **RabbitMQ** installed. Find instructions for your platform [here](http://www.rabbitmq.com/download.html).\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nPut this in your `Gemfile`:\r\n\r\n    gem 'kanina'\r\n\r\nThen run `bundle install` to install the gem and its dependencies. Finally, run `rails generate kanina:install` to create bin/kanina and an amqp.yml.sample file in your config folder.\r\n\r\nCopy amqp.yml.sample to amqp.yml, and change it to connect to your local RabbitMQ server. By default, it will connect to the one on your development machine, as long as you haven't changed the settings on it.\r\n\r\nSending Messages\r\n----------------\r\n\r\nRun the generator:\r\n\r\n    rails generate kanina:message MessageName\r\n\r\nThen specify the name of the exchange, OR the routing key for the intended queue. To send a message, generate an instance of your new class, add data, and hit send:\r\n\r\n    msg = MessageName.new\r\n    msg.data = {key: \"value\"}\r\n    msg.deliver\r\n\r\nYou can also specify the type of exchange you want to create, like so:\r\n\r\n    class WeatherMessage < Kanina::Message\r\n        fanout \"reports\"\r\n    end\r\n\r\nRemember to use [RabbitMQ's documentation](http://www.rabbitmq.com/documentation.html) to understand the rules governing how to use different types of exchanges, bindings, and queues appropriately. You don't have to create those things ahead of time with Kanina, but you do have to understand how they work!\r\n\r\nReceiving messages\r\n------------------\r\n\r\nGenerate a subscription with this command:\r\n\r\n    rails generate kanina:subscription SubscriptionName\r\n\r\nThen tweak the resulting file to attach to the right queue, or use bindings to watch a named exchange. Use a subscribe block to define code that you want run when a message is received:\r\n\r\n    class NotifyUserSubscription < Kanina::Subscription\r\n      subscribe queue: \"notify_user\" do |data|\r\n        User.where(id: data[:id]).first.notify\r\n      end\r\n    end\r\n\r\n","google":"UA-11853441-7","note":"Don't delete this file! It's used internally to help with page regeneration."}